{"version":3,"sources":["serviceWorker.ts","reducers/index.ts","actions/types.ts","configureStore.ts","components/IntroPage.tsx","components/App.tsx","index.tsx","components/Logo.png"],"names":["Boolean","window","location","hostname","match","combineReducers","planet","state","action","type","payload","vehicle","token","result","time","configureStore","createStore","reducer","applyMiddleware","thunk","IntroPage","className","src","logo","alt","App","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCFSC,cAAqC,CAClDC,OAAQ,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC9B,OAAQA,EAAOC,MACb,IClB6B,sBDmB3B,OAAOD,EAAOE,QAChB,QACE,OAAOH,IAGbI,QAAS,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAIC,EAAW,uCAC/B,OAAQA,EAAOC,MACb,ICvB+B,wBDwB7B,OAAOD,EAAOE,QAChB,QACE,OAAOH,IAGbK,MAAO,WAAyB,IAAxBL,EAAuB,uDAAf,GAAIC,EAAW,uCAC7B,OAAQA,EAAOC,MACb,IC5BmB,YD6BjB,OAAOD,EAAOE,QAChB,QACE,OAAOH,IAGbM,OAAQ,WAAyB,IAAxBN,EAAuB,uDAAf,GAAIC,EAAW,uCAC9B,OAAQA,EAAOC,MACb,ICjCqB,cDkCnB,OAAOD,EAAOE,QAChB,QACE,OAAOH,IAGbO,KAAM,WAAwB,IAAvBP,EAAsB,uDAAd,EAAGC,EAAW,uCAC3B,OAAQA,EAAOC,MACb,ICtCoB,aDuClB,OAAOD,EAAOE,QAChB,QACE,OAAOH,ME1CAQ,EAJCC,YAAYC,EAASC,YAAgBC,M,wBC4BtCC,MArBf,WACE,OAEE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,uDACb,yBAAKA,UAAU,0BAA0BC,IAAKC,IAAMC,IAAI,iBACxD,wBAAIH,UAAU,2BAAd,mBACA,uBAAGA,UAAU,8BAAb,wOACA,wBAAIA,UAAU,0BAAd,4BACA,yBAAKA,UAAU,sCCSVI,MAvBf,WACE,OAiBE,6BACE,kBAAC,EAAD,QCpBNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SN2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBOjJ5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.e92ecc26.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { ReduxActions } from '../actions';\nimport * as actionTypes from '../actions/types';\nimport {\n  Planet, Vehicle, Result,\n} from '../types/types';\n\nexport type State = {\n  planet:Planet[];\n  vehicle:Vehicle[];\n  token:string;\n  result:Result;\n  time:number\n};\n\nexport default combineReducers<State, ReduxActions>({\n  planet: (state = [], action) => {\n    switch (action.type) {\n      case actionTypes.SET_PLANET_TO_STORE:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  vehicle: (state = [], action) => {\n    switch (action.type) {\n      case actionTypes.SET_VEHICLES_TO_STORE:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  token: (state = '', action) => {\n    switch (action.type) {\n      case actionTypes.GET_TOKEN:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  result: (state = {}, action) => {\n    switch (action.type) {\n      case actionTypes.FIND_FALCON:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  time: (state = 0, action) => {\n    switch (action.type) {\n      case actionTypes.TIME_TAKEN:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n\n});\n","\nexport const SET_PLANET_TO_STORE = 'SET_PLANET_TO_STORE';\nexport type SET_PLANET_TO_STORE = typeof SET_PLANET_TO_STORE;\n\nexport const SET_VEHICLES_TO_STORE = 'SET_VEHICLES_TO_STORE';\nexport type SET_VEHICLES_TO_STORE = typeof SET_VEHICLES_TO_STORE;\n\nexport const GET_TOKEN = 'GET_TOKEN';\nexport type GET_TOKEN = typeof GET_TOKEN;\n\nexport const FIND_FALCON = 'FIND_FALCON';\nexport type FIND_FALCON = typeof FIND_FALCON;\n\nexport const TIME_TAKEN = 'TIME_TAKEN';\nexport type TIME_TAKEN = typeof TIME_TAKEN;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducers';\n// import * as actions from \"./actions\";\n\n\nconst configureStore = () => {\n  const store = createStore(reducer, applyMiddleware(thunk));\n  return store;\n};\n\nexport default configureStore();\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport {\n  Button,\n} from 'antd';\nimport Selection from './Selection';\n\nimport './IntroPage.css';\nimport logo from './Logo.png';\n\nfunction IntroPage() {\n  return (\n\n    <div className=\"falcon-intro-main\">\n      <div className=\"row \">\n        <div className=\"col-12 falcon-intro-main-col justify-content-center\">\n          <img className=\"falcone-intro-main-logo\" src={logo} alt=\"falcone-logo\" />\n          <h1 className=\"falcone-intro-main-head\">FINDING FALCONE</h1>\n          <p className=\"falcone-intro-main-subtext\">King Shan received intelligence that Al Falcone is in hiding in one of these 6 planets.Donlon,Enchai,Jebing,Sapir,Lerbin & Pingasor.However he has limited resources at his disposal & can send his army to only 4 of these planets.</p>\n          <h4 className=\"falcone-intro-main-sub\">HELP HIM TO FIND FALCONE</h4>\n          <div className=\"d-flex justify-content-center\">\n            {/* <Button type=\"primary\">\n              <Link to=\"/FindFalcone\">START</Link>\n            </Button> */}\n          </div>\n        </div>\n      </div>\n    </div>\n\n  );\n}\nexport default IntroPage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport IntroPage from './IntroPage';\nimport Selection from './Selection';\nimport FinishPage from './FinishPage';\n\nfunction App() {\n  return (\n  // <Router>\n  //   <div className=\"App-main\">\n\n    //     <Switch>\n    //       <Route path=\"/\">\n    //         <IntroPage />\n    //       </Route>\n    //       <Route path=\"/FindFalcone\" exact>\n    //         <Selection />\n    //       </Route>\n    //       <Route path=\"/FindFalcon/result\">\n    //         <FinishPage />\n    //       </Route>\n    //     </Switch>\n    //   </div>\n    // </Router>\n    <div>\n      <IntroPage />\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './configureStore';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Logo.7e244568.png\";"],"sourceRoot":""}