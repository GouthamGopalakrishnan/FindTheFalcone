{"ast":null,"code":"import * as actions from './index';\n\nfunction exampleAPI() {\n  return Promise.resolve('Async Chat Bot');\n}\n\nexport const thunkSendMessage = message => async dispatch => {\n  const asyncResp = await exampleAPI();\n  dispatch(actions.sampleAction(asyncResp));\n};\nexport const planetsApi = () => async dispatch => {\n  const planetFetch = await fetch('https://findfalcone.herokuapp.com/planets').then(response => response.json());\n  console.log(planetFetch);\n  dispatch(actions.fetchPlanets(planetFetch));\n};\nexport const VehiclesApi = () => async dispatch => {\n  const vehicleFetch = await fetch('https://findfalcone.herokuapp.com/vehicles').then(response => response.json());\n  dispatch(actions.fetchVehicles(vehicleFetch));\n};\nexport const GetTokenFromApi = () => async dispatch => {\n  const tokenFetch = await fetch('https://findfalcone.herokuapp.com/token', {\n    headers: {\n      Accept: 'application/json'\n    },\n    method: 'POST'\n  }).then(response => response.json());\n  console.log(tokenFetch);\n  dispatch(actions.getToken(tokenFetch));\n};\nexport const GetResultFromApi = (token, planet_name, vehicle_name) => async dispatch => {\n  const selectedData = {\n    token,\n    planets: planet_name,\n    vehicles: vehicle_name\n  };\n  const fetchResult = await fetch('https://findfalcone.herokuapp.com/find', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(selectedData)\n  }).then(response => response.json());\n  console.log(fetchResult);\n  dispatch(actions.getResult(fetchResult));\n};","map":{"version":3,"sources":["/home/goutham/typescript-sample/src/actions/thunkActions.ts"],"names":["actions","exampleAPI","Promise","resolve","thunkSendMessage","message","dispatch","asyncResp","sampleAction","planetsApi","planetFetch","fetch","then","response","json","console","log","fetchPlanets","VehiclesApi","vehicleFetch","fetchVehicles","GetTokenFromApi","tokenFetch","headers","Accept","method","getToken","GetResultFromApi","token","planet_name","vehicle_name","selectedData","planets","vehicles","fetchResult","body","JSON","stringify","getResult"],"mappings":"AAGA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;;AAMA,SAASC,UAAT,GAAsB;AACpB,SAAOC,OAAO,CAACC,OAAR,CAAgB,gBAAhB,CAAP;AACD;;AAGD,OAAO,MAAMC,gBAAgB,GAC3BC,OAD8B,IAEwB,MAAOC,QAAP,IAAoB;AAC1E,QAAMC,SAAS,GAAG,MAAMN,UAAU,EAAlC;AACAK,EAAAA,QAAQ,CAACN,OAAO,CAACQ,YAAR,CAAqBD,SAArB,CAAD,CAAR;AACD,CALM;AAMP,OAAO,MAAME,UAAU,GAAG,MAC8B,MAAOH,QAAP,IAAoB;AAC1E,QAAMI,WAAoB,GAAG,MAAMC,KAAK,CAAC,2CAAD,CAAL,CAChCC,IADgC,CAC1BC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADa,CAAnC;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAJ,EAAAA,QAAQ,CAACN,OAAO,CAACiB,YAAR,CAAqBP,WAArB,CAAD,CAAR;AACD,CAPM;AASP,OAAO,MAAMQ,WAAW,GAAG,MAC4B,MAAOZ,QAAP,IAAoB;AACzE,QAAMa,YAAsB,GAAG,MAAMR,KAAK,CAAC,4CAAD,CAAL,CAClCC,IADkC,CAC5BC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADe,CAArC;AAEAR,EAAAA,QAAQ,CAACN,OAAO,CAACoB,aAAR,CAAsBD,YAAtB,CAAD,CAAR;AACD,CALM;AAOP,OAAO,MAAME,eAAe,GAAG,MACwB,MAAOf,QAAP,IAAoB;AACzE,QAAMgB,UAAgB,GAAG,MAAMX,KAAK,CAAC,yCAAD,EAA4C;AAAEY,IAAAA,OAAO,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAX;AAA2CC,IAAAA,MAAM,EAAE;AAAnD,GAA5C,CAAL,CAC5Bb,IAD4B,CACtBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADS,CAA/B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYM,UAAZ;AACAhB,EAAAA,QAAQ,CAACN,OAAO,CAAC0B,QAAR,CAAiBJ,UAAjB,CAAD,CAAR;AACD,CANM;AAQP,OAAO,MAAMK,gBAAgB,GAAG,CAC9BC,KAD8B,EAChBC,WADgB,EACMC,YADN,KAEuB,MAAOxB,QAAP,IAAoB;AACzE,QAAMyB,YAAwB,GAAG;AAC/BH,IAAAA,KAD+B;AAE/BI,IAAAA,OAAO,EAAEH,WAFsB;AAG/BI,IAAAA,QAAQ,EAAEH;AAHqB,GAAjC;AAOA,QAAMI,WAAkB,GAAG,MAAMvB,KAAK,CAAC,wCAAD,EAA2C;AAAEc,IAAAA,MAAM,EAAE,MAAV;AAAkBF,IAAAA,OAAO,EAAE;AAAEC,MAAAA,MAAM,EAAE,kBAAV;AAA8B,sBAAgB;AAA9C,KAA3B;AAA+FW,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,YAAf;AAArG,GAA3C,CAAL,CAC9BnB,IAD8B,CACxBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADW,CAAjC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYkB,WAAZ;AACA5B,EAAAA,QAAQ,CAACN,OAAO,CAACsC,SAAR,CAAkBJ,WAAlB,CAAD,CAAR;AACD,CAdM","sourcesContent":["import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport * as actions from './index';\nimport { State } from '../reducers';\nimport {\n  Planet, Vehicle, FalconeData, Result, Token,\n} from '../types/types';\n\nfunction exampleAPI() {\n  return Promise.resolve('Async Chat Bot');\n}\n\n\nexport const thunkSendMessage = (\n  message: string,\n): ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const asyncResp = await exampleAPI();\n  dispatch(actions.sampleAction(asyncResp));\n};\nexport const planetsApi = (\n): ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const planetFetch:Planet[] = await fetch('https://findfalcone.herokuapp.com/planets')\n    .then((response) => response.json());\n\n  console.log(planetFetch);\n  dispatch(actions.fetchPlanets(planetFetch));\n};\n\nexport const VehiclesApi = (\n):ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const vehicleFetch:Vehicle[] = await fetch('https://findfalcone.herokuapp.com/vehicles')\n    .then((response) => response.json());\n  dispatch(actions.fetchVehicles(vehicleFetch));\n};\n\nexport const GetTokenFromApi = (\n):ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const tokenFetch:Token = await fetch('https://findfalcone.herokuapp.com/token', { headers: { Accept: 'application/json' }, method: 'POST' })\n    .then((response) => response.json());\n  console.log(tokenFetch);\n  dispatch(actions.getToken(tokenFetch));\n};\n\nexport const GetResultFromApi = (\n  token:string, planet_name:string[], vehicle_name:string[],\n):ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const selectedData:FalconeData = {\n    token,\n    planets: planet_name,\n    vehicles: vehicle_name,\n\n\n  };\n  const fetchResult:Result = await fetch('https://findfalcone.herokuapp.com/find', { method: 'POST', headers: { Accept: 'application/json', 'Content-Type': 'application/json' }, body: JSON.stringify(selectedData) })\n    .then((response) => response.json());\n  console.log(fetchResult);\n  dispatch(actions.getResult(fetchResult));\n};\n"]},"metadata":{},"sourceType":"module"}